################################################################################
# INPUT : parametrage de la connexion a la base de données
################################################################################
input {
    jdbc {
        # Paramétrage de la connexion à la base de données
        jdbc_connection_string => "jdbc:mysql://eurocopter-mysql:3306/eurocopter"

        # Utilisateur et mot de passe
        jdbc_user => "eurocopter"
        jdbc_password => "eurocopter"

        # Chemin vers le driver (copie depuis le fichier Dockerfile)
        jdbc_driver_library => "/tmp/mysql-connector-java-5.1.40-bin.jar"

        # Nom du de la classe du Driver
        jdbc_driver_class => "com.mysql.jdbc.Driver"

        # Requête exécutée
        statement => "SELECT * from local"
    }
}

################################################################################
# FILTER : manipulation des donnees pour generer des champs calcules
################################################################################
filter {
  ruby {
    code => "
        if event.get('capacity') > 0 && event.get('occupancy') > 0
            event.set('remplissage_test', (event.get('capacity').to_f / event.get('occupancy').to_f).round(2))
        else
            event.set('remplissage_test', 0.00)
        end
        "
  }
}

################################################################################
# OUTPUT : La ou on envoie les donnees
################################################################################

output {
    elasticsearch {
        # Nom de l'index
        index => "locals"
        document_type => "local"
        # Identifiant des lignes
        document_id => "%{id}"
        hosts => "localhost"
    }
}
